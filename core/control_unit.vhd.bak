library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity control_unit is 
port (
	mck,start,fetch_wait,mem_wait,branch,stall: in std_logic;
	uut_en,uut_clr: out std_logic_vector(5 downto 0);
	fetch_en,clk: out std_logic
	
);
end control_unit;

architecture rtl of control_unit is

signal state,next_state : unsigned (2 downto 0):="000";
-- 000 stop
-- 001 start
-- 010 stall for rd
-- 011 branch
-- 100 wait
begin

process (Mck)
begin
	if rising_edge (Mck) then 		
		state <= next_state;
	end if;
end process;

process(Mck)
begin
	if rising_edge (Mck) then
		if state = "000" then
			uut_en <= "000000";
			uut_clr <= "111111";
			if start = '1' then
				next_state <= "001";
			else
				next_state <= "000";
			end if;
		elsif state = "001" then
			uut_en <= "111111";
			uut_clr <= "000000";
			if start = '0' then
				next_state <= "000";
			elsif mem_wait = '1' then
				next_state <= "100";
			elsif branch = '1' then
				next_state <= "011";
			elsif stall = '1' then
				next_state <= "010";
			elsif fetch_wait = '1' then
				next_state <= "100";
			else
				next_state <= "001";
			end if;
		elsif state = "010" then 
			if start = '0' then
				next_state <= "000";
			elsif mem_wait = '1' then
				next_state <= "100";
			elsif branch = '1' then
				next_state <= "011";
			elsif stall = '0' then
				next_state <= "001";
			else
				next_state <= "010";
			end if;
		elsif state = "011" then 
			if start = '0' then
				next_state <= "000";
			elsif mem_wait = '1' then
				next_state <= "100";
			elsif branch = '0' then
				next_state <= "001";
			else
				next_state <= "011";
			end if;
		elsif state = "100" then 
			if start = '0' then
				next_state <= "000";
			elsif mem_wait = '1' then
				next_state <= "100";
			elsif branch = '1' then
				next_state <= "011";
			elsif stall = '1' then
				next_state <= "011";
			elsif fetch_wait = '1' then
				next_state <= "100";
			else
				next_state <= "001";
			end if;
		end if;


	end if;
end process;

end rtl;

